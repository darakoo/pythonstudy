[ch05 파이썬의 함수] - [section10 메소드] 

### 목차 ###
01. 메소드
    1. 메소드란?
    특정 객체가 가지고 있는 함수

    2. 메소드 호출 방식
    객체.함수이름()
    
02. 문자열 메소드
    1. format()
    2. count()
    3. find()
    4. index()
    5. 대소문자 변환 메소드
    6. join()
    7. split()
    8. replace()
    9. 불필요한 문자열 제거 메소드
03. 리스트 메소드
    1. append()
    2. extend()
    3. insert()
    4. clear()
    5. pop()
    6. remove()
04. 세트 메소드
    1. 교집합
    2. 합집합
    3. 차집합

### MISSION ###
- 특정한 객체를 통해서만 호출할 수 있는 함수이다.
- 문자열 자료형의 객체를 처리할 수 있는 find(), format(), join(), split(), strip() 등의 메소드를 활용할 수 있다.
- append(), pop() 등의 메소드를 이용해 리스트에 새로운 요소를 추가하거나 제거할 수 있다.


### 상세 ###
메소드 선언시 주의사항
	메소드 내에서 메소드를 선언하지 않고
	메소드를 사용할 때에는 보통 메소드 안에서 사용한다.
	매개변수가 없을 때에는 사용 시 값을 전달할 수 없다.
	리턴 값이 있다면 사용하는 부분 통채로를 리턴값으로 보자.

메소드 선언 순서
예) 두 정수의 덧셈 메소드 만들기

1. 메소드 이름을 생각한다.
	def add():

2. 매개변수를 생각한다.
	def add(num1, num2):

3. 실행할 문장을 생각한다.
	def add(num1, num2):
		result = num1 + num2

4. 리턴 값을 생각한다.
	def add(num1, num2):
		result = num1 + num2
		return result


메소드의 목적
	1. 재사용의 목적(단, 특정성을 부여해서는 안된다)
	2. 소스코드 간결화

리턴을 해야 할 때
	메소드 내에서 모든 작업이 끝나지 않을 때,
	사용하는 부분에 메소드 내의 작업 결과를 알려주어야 할 때

리턴을 하지 않아야 할 때
	메소드 내에서 모든 작업이 완료될 때,
	사용하는 부분에 결과를 알릴 필요가 없을 때

















