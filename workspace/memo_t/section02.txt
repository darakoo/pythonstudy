[ch02 파이썬의 기본] - [section02 변수와 자료형]

### 목차 ###
01. 파이썬 프로그래밍 기본
	1. 주석
		# 한줄주석
		'''
		여러줄주석
		'''
		"""
		Docstring, 여러줄주석
		"""

02. 변수
	- 데이터가 저장되는 메모리 공간
	- 변수명 생성규칙을 잘 따라야 한다.
	- 변수에 값을 전달할 때 자동으로 메모리 공간이 할달되는 동적 타이핑이다.
		- c, c++, java : int n = 10;
		- python : n = 10 n = 3.14 n = 'hello'  
03. 기본 자료형
	1. 정수(int)
	- 실습 : int(1.9)	int(True) 	int(False) 	int('100')
	2. 실수(float)
	- 실습 : float(1.9)	float(True) 	float(False) 	float('100')
	3. 논리(bool)
	- True, False : 첫글자 대소문자 주의!
	- 실습 : bool(0) 	bool('') 	bool(1)
	4. 문자열
		1) 문자열이란?
		- 실습 : a = '대한민국'	a = "대한민국"	a = '''대한민국'''	a = """대한민국"""
		2) 문자열 변환
		- 실습 : str(100)	str(True)	str(False)	str(3.14)
		3) 문자열 인덱싱
		4) 문자열 슬라이싱

04. 컬렉션
	1. list
		a= [1,2,3]
	2. tuple
		a= (1,2,3)
	3. set
		a= {1,2,3}
	4. dict
		a= {'age':25}

05. mutable과 immutable
	1. mutable
	- 생성된 후 할당된 메모리 주소에서 값 변경이 가능하다.
	- list, set, dict
	2. immutable
	- 생성된 후 값 변경시 다른 메모리 주소에서 새롭게 생성된다.
	- int, float, str, tuple

### MISSION ###
- 파이썬의 변수는 값을 저장하는 메모리 공간입니다.
- 기본 자료형으로 int, float, str, bool이 있습니다.
- int(), float(), str(), bool() 함수를 이용해 다른 자료형의 객체로 변환할 수 있습니다.
- list 자료형은 여러 객체를 저장하고 저장된 객체를 수정할 수 있습니다.
- tuple 자료형은 여러 객체를 저장하지만 저장된 객체를 수정할 수 없습니다.
- set 자료형은 값이 중복되지 않은 여러 객체를 저장할 수 있습니다.
- dict 자료형은 키와 값의 조합으로 구성된 여러 객체를 저장 할 수 있습니다.

### 상세 ###
변수
	변수는 저장공간이다.
	x	=	0
       저장공간의     대입	값(상수)
	이름	연산자
	x라는 이름의 변수에 0이라는 값을 넣어라!

자료형(type)
정수형	int
실수형	float
문자열	str
논리형	bool

변수의 선언(메모리 할당)
	초기화
	변수명 = 초기값

변수 선언시 RAM
	x = 0
	x라는 이름의 저장공간이 RAM에 할당된다.
	x에 0이라는 초기값이 들어간다.

주소(C언어)
	저장공간이 RAM에 할당되면 고유한 값인
	주소값이 부여된다.

변수 선언 시 주의사항
	같은 이름으로 선언할 수 있으나 두번째 선언은
	기존의 변수의 값을 수정할 때 사용된다.
	예)
		x = 10
		x = 20
		print(x)

	초기화를 반드시 해준다.
	되도록 선언부에 한꺼번에 선언한다(페이지 상단).

	예)
		1	x = 10
		2	y = 20
		3
		..
		4894	
		18999	print(y)

변수명 주의사항
	문자부터 시작한다
	예)	2a (X),  a2(O)
	특수문자는 사용할 수 없다.
	단, _(언더바)는 사용 가능하다.
	공백을 사용할 수 없다.
	good_boy : 팟홀 표기법
	goodBoy : 카멜 표기법
	되도록 소문자를 사용한다.
	되도록 뜻이 있는 단어를 선택한다.
	a, b, c, d (X)
	data, number, seq, name, age, count,....(O)
	되도록 한글은 사용하지 않는다.

-----------------------------------------------------------
서식문자
	1. %
	2. "".format()

형변환
	1. 자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

	2. 강제 형변환
		자료형(값)
		int(10.98) == 10

아스키 코드
	컴퓨터가 문자를 기억하고 있는 정수 값
	예) A : 65
	     a : 97
		 
--------------------------------------------------
컬렉션 - 데이터를 수집

알고리즘
	문제를 해결하기 위한 순서 또는 절차.

	[빵집]
	반죽 -> 발효 -> 굽기 -> 데코 -> 포장 -> 판매

자료구조 
	의미없는 데이터가 자료구조를 통과하는 순간
	하나의 정보가 된다.

	age = 10

	데이터를 저장공간에 담는 순간 하나의 정보가 된다.
---------------------------------------------------------------
list
	num1 = 1252
	num2 = 32
	num3 = 4389
	num4 = 32910
	...
	num100 = 2187391

	1. 변수를  여러번 선언하지 않고 여러 칸 list를 한 번만 선언하기 위해서 사용.
	  변수를 선언하면, 값이 한 개만 담기고, 이름도 반드시 붙여야 한다.
	  여러 변수를 선언하면 이름도 많아져서 관리하기 불편하다.
	  따라서 list는 이름 하나고 각 값을 방번호(인덱스)로 접근하기 때문에
	  값을 관리하기 훨씬 편하고 쉽다.

	2. 규칙성이 없는 값에 규칙성을 부여하기 위해서

	"한동석"	"지우개"	"마우스"	"핫도그"	"배고파"	"맛있다"
	  0                1        2           3           4              5

	0부터 5까지 1씩 증가(list에 담으면 규칙성이 생긴다)

list 선언
	대괄호 보면 list다.
	list명 = [값1, 값2,.....]
	list명 = [값] * 칸수
	list명 = []

list 길이
	len(list명)


------------------------------------------------------------------
list 사용
	dataList = [1, 2, 3]

	- 값 넣기
		(추가)
		dataList.append(4)
		결과 : [1, 2, 3, 4]

		(삽입)
		dataList.insert(인덱스번호, 값)
		dataList.insert(1, 1.5)
		결과 : [1, 1.5, 2, 3]

	- 값 삭제
		dataList.remove(값)
		[1, 2, 3, 1].remove(1)
		결과 : [2, 3, 1]
		중복 시 좌에서 우 방향으로 가장 먼저 만난 값의 인덱스 번호를
		가져온다.

		del dataList[인덱스번호]
		del dataList[1]
		결과 : [1, 3]

		dataList.clear()
		모든 값 삭제

	- 값 검색
		dataList.index(값)
		dataList.index(3)
		결과 : 2
		중복 시 좌에서 우 방향으로 가장 먼저 만난 값의 인덱스 번호를
		가져온다.

	- 값 수정
		dataList[인덱스번호] = 새로운 값
		dataList[0] = 10
		결과 : [10, 2, 3]

for문 사용
	0, ?, 1 --> ?로 사용 가능
	for i in range(len(list명)) : 
		list명[i]	//리스트의 각 요소

빠른 for문(향상된 for문, forEach문)
	for i in list명:
		i	//리스트의 각 요소

값의 유무 확인
	값 in list명 : 조건식(참 또는 거짓의 값) list안에 값이 있으면 True!
	값 not in list명 : list안에 값이 없으면 True!


------------------------------------------------------

dict
	한 쌍으로 저장되어 관리한다.
	len()를 사용하면 한 쌍을 1로 카운트한다.
	키 값은 중복이 될 수 없으며, 값은 중복이 가능하다.
	키 값을 주면 그 키의 짝꿍 값을 가지고 온다.

dict 선언
	dict명 = {키 : 값, 키 : 값,....}

dict 사용
	-추가(키 값이 없을 때)
		dict명[키] = 값
	-수정(키 값이 있을 때)
		dict명[키] = 값
	-삭제(한 쌍이 삭제된다)
		del dict명[키]
	-검색
		키 in dict명 : 키 값이 있으면 참
		키 not in dict명 : 키 값이 없으면 참

Key 분리
	list(dict명.keys())

Value 분리
	dict명.values()
